@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>

<table class="table-sm table-striped table-bordered">
    <thead>
    <tr>
        <th>ID</th><th>Name</th>
        <th>Category</th><th>Price</th><td/>
    </tr>
    </thead>
    <tbody>
    @if (ProductData?.Count() > 0)
    {
        @foreach (Product p in ProductData)
        {
            <tr>
                <td>@p.ProductID</td>
                <td>@p.Name</td>
                <td>@p.Category</td>
                <td>@p.Price.ToString("C2", CultureInfo.GetCultureInfo("en-GB"))</td>
                <td>
                    <NavLink class="btn btn-info btn-sm"
                             href="@GetDetailsUrl(p.ProductID)">
                        Details
                    </NavLink>
                    <NavLink class="btn btn-warning btn-sm"
                             href="@GetEditUrl(p.ProductID)">
                        Edit
                    </NavLink>
                    <button class="btn btn-danger btn-sm" 
                            @onclick=@(e => DeleteProduct(p))>
                        Delete
                    </button>
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="5" class="text-center">No Products</td>
        </tr>
    }
    </tbody>
</table>

<NavLink class="btn btn-primary" href="/admin/products/create">Create</NavLink>

@code
{
    private IStoreRepository Repository => Service;

    private IEnumerable<Product> ProductData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        ProductData = await Repository.Products.ToListAsync();
    }

    private async Task DeleteProduct(Product p)
    {
        await Repository.DeleteProductAsync(p);
        await UpdateData();
    }

    private string GetDetailsUrl(long id) => $"/admin/products/details/{id}";
    private string GetEditUrl(long id) => $"/admin/products/edit/{id}";
}
